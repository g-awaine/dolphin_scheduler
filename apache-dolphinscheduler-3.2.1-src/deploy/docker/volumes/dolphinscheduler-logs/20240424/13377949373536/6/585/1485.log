[INFO] 2024-04-24 16:20:08.464 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:20:08.470 +0800 - *********************************  Initialize task context  ***********************************
[INFO] 2024-04-24 16:20:08.470 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:20:08.470 +0800 - Begin to initialize task
[INFO] 2024-04-24 16:20:08.470 +0800 - Set task startTime: 1713946808470
[INFO] 2024-04-24 16:20:08.471 +0800 - Set task appId: 585_1485
[INFO] 2024-04-24 16:20:08.471 +0800 - End initialize task {
  "taskInstanceId" : 1485,
  "taskName" : "keyword filtering",
  "firstSubmitTime" : 1713946808443,
  "startTime" : 1713946808470,
  "taskType" : "PYTHON",
  "workflowInstanceHost" : "172.18.0.9:5678",
  "host" : "172.18.1.1:1234",
  "logPath" : "/opt/dolphinscheduler/logs/20240424/13377949373536/6/585/1485.log",
  "processId" : 0,
  "processDefineCode" : 13377949373536,
  "processDefineVersion" : 6,
  "processInstanceId" : 585,
  "scheduleTime" : 0,
  "globalParams" : "[{\"prop\":\"keywords\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"\\\"singapore\\\", \\\"lol\\\"\"}]",
  "executorId" : 1,
  "cmdTypeIfComplement" : 7,
  "tenantCode" : "default",
  "processDefineId" : 0,
  "projectId" : 0,
  "projectCode" : 13010050770016,
  "taskParams" : "{\"localParams\":[],\"rawScript\":\"import pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col\\nfrom pyspark.sql.types import StringType\\nfrom pyspark import SparkFiles\\n\\n# Initialize Spark session in local mode\\nspark = SparkSession.builder \\\\\\n    .appName(\\\"Reddit Keyword Filtering\\\") \\\\\\n    .master(\\\"local\\\") \\\\\\n    .config(\\\"spark.jars.packages\\\", \\\"org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1\\\") \\\\\\n    .config(\\\"spark.driver.extraJavaOptions\\\", \\\"-Divy.cache.dir=/tmp -Divy.home=/tmp\\\") \\\\\\n    .getOrCreate()\\n\\n# message = ${message}\\nmessage = {\\n  \\\"user\\\": \\\"premiumplatinum\\\",\\n  \\\"content\\\": \\\"singapore is stupid\\\",\\n  \\\"url\\\": \\\"https://www.reddit.com/r/singapore/comments/1c9itat/21apr2024_orchard_road_camcar_turning_right_into/\\\",\\n  \\\"context\\\": \\\"21apr2024 orchard road camcar turning right into centrepoint get tbone by cyclist\\\",\\n  \\\"score\\\": 131,\\n  \\\"subreddit\\\": \\\"singapore\\\",\\n  \\\"type\\\": \\\"post\\\",\\n  \\\"id\\\": \\\"1c9itat\\\",\\n  \\\"datetime\\\": \\\"2024-04-21 22:10:42\\\"\\n}\\n\\nrdd = spark.sparkContext.parallelize([message])\\ndf = spark.read.json(rdd)\\n\\n# filter rows containing specific keywords\\nkeywords = [${keywords}]\\n\\n# initialize the filter condition with False\\nfilter_condition = col(\\\"content\\\").contains(keywords[0])\\n\\n# loop through the rest of the keywords and update the filter condition\\nfor keyword in keywords[1:]:\\n    filter_condition = filter_condition | col(\\\"content\\\").contains(keyword)\\n\\n# apply the filter condition to the DataFrame\\nfiltered_df = df.filter(filter_condition)\\nfiltered_df.show()\\n\\n# pass whether the data is relevant to singapore or not to the downstream tasks\\n\\nprint('#{setValue(is_relevant=%s)}' % str(True if filtered_df.count()==1 else False))\\n\\n\\n\\n\\n# stop Spark session\\nspark.stop()\\n\",\"resourceList\":[]}",
  "environmentConfig" : "export SPARK_HOME=/opt/spark-3.5.1-bin-hadoop3-scala2.13\nexport JAVA_HOME=/opt/java/openjdk\nexport PYSPARK_DRIVER_PYTHON=/bin/python3.11\nexport PYTHON_LAUNCHER=/bin/python3.11\nexport PYSPARK_PYTHON=/bin/python3.11",
  "prepareParamsMap" : {
    "system.task.definition.name" : {
      "prop" : "system.task.definition.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "keyword filtering"
    },
    "system.project.name" : {
      "prop" : "system.project.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : null
    },
    "REDDIT_HOME" : {
      "prop" : "REDDIT_HOME",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "/local_storage/reddit"
    },
    "keywords" : {
      "prop" : "keywords",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "\"singapore\", \"lol\""
    },
    "system.biz.curdate" : {
      "prop" : "system.biz.curdate",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240424"
    },
    "system.task.instance.id" : {
      "prop" : "system.task.instance.id",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "1485"
    },
    "message" : {
      "prop" : "message",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : ""
    },
    "system.task.definition.code" : {
      "prop" : "system.task.definition.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13377752024032"
    },
    "system.datetime" : {
      "prop" : "system.datetime",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240424162008"
    },
    "system.project.code" : {
      "prop" : "system.project.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13010050770016"
    },
    "system.workflow.instance.id" : {
      "prop" : "system.workflow.instance.id",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "585"
    },
    "system.biz.date" : {
      "prop" : "system.biz.date",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240423"
    },
    "system.workflow.definition.name" : {
      "prop" : "system.workflow.definition.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "filter_post"
    },
    "system.workflow.definition.code" : {
      "prop" : "system.workflow.definition.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13377949373536"
    }
  },
  "taskAppId" : "585_1485",
  "taskTimeout" : 2147483647,
  "workerGroup" : "default",
  "delayTime" : 0,
  "currentExecutionStatus" : "SUBMITTED_SUCCESS",
  "endTime" : 0,
  "varPool" : "[{\"prop\":\"message\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"\"}]",
  "dryRun" : 0,
  "paramsMap" : { },
  "cpuQuota" : -1,
  "memoryMax" : -1,
  "testFlag" : 0,
  "logBufferEnable" : false,
  "dispatchFailTimes" : 0
}
[INFO] 2024-04-24 16:20:08.472 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:20:08.473 +0800 - *********************************  Load task instance plugin  *********************************
[INFO] 2024-04-24 16:20:08.473 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:20:08.478 +0800 - Send task status RUNNING_EXECUTION master: 172.18.1.1:1234
[INFO] 2024-04-24 16:20:08.479 +0800 - TenantCode: default check successfully
[INFO] 2024-04-24 16:20:08.480 +0800 - WorkflowInstanceExecDir: /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485 check successfully
[INFO] 2024-04-24 16:20:08.480 +0800 - Create TaskChannel: org.apache.dolphinscheduler.plugin.task.python.PythonTaskChannel successfully
[INFO] 2024-04-24 16:20:08.481 +0800 - Download resources successfully: 
ResourceContext(resourceItemMap={})
[INFO] 2024-04-24 16:20:08.481 +0800 - Download upstream files: [] successfully
[INFO] 2024-04-24 16:20:08.482 +0800 - Task plugin instance: PYTHON create successfully
[INFO] 2024-04-24 16:20:08.483 +0800 - Initialize python task params {
  "localParams" : [ ],
  "varPool" : null,
  "rawScript" : "import pyspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col\nfrom pyspark.sql.types import StringType\nfrom pyspark import SparkFiles\n\n# Initialize Spark session in local mode\nspark = SparkSession.builder \\\n    .appName(\"Reddit Keyword Filtering\") \\\n    .master(\"local\") \\\n    .config(\"spark.jars.packages\", \"org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1\") \\\n    .config(\"spark.driver.extraJavaOptions\", \"-Divy.cache.dir=/tmp -Divy.home=/tmp\") \\\n    .getOrCreate()\n\n# message = ${message}\nmessage = {\n  \"user\": \"premiumplatinum\",\n  \"content\": \"singapore is stupid\",\n  \"url\": \"https://www.reddit.com/r/singapore/comments/1c9itat/21apr2024_orchard_road_camcar_turning_right_into/\",\n  \"context\": \"21apr2024 orchard road camcar turning right into centrepoint get tbone by cyclist\",\n  \"score\": 131,\n  \"subreddit\": \"singapore\",\n  \"type\": \"post\",\n  \"id\": \"1c9itat\",\n  \"datetime\": \"2024-04-21 22:10:42\"\n}\n\nrdd = spark.sparkContext.parallelize([message])\ndf = spark.read.json(rdd)\n\n# filter rows containing specific keywords\nkeywords = [${keywords}]\n\n# initialize the filter condition with False\nfilter_condition = col(\"content\").contains(keywords[0])\n\n# loop through the rest of the keywords and update the filter condition\nfor keyword in keywords[1:]:\n    filter_condition = filter_condition | col(\"content\").contains(keyword)\n\n# apply the filter condition to the DataFrame\nfiltered_df = df.filter(filter_condition)\nfiltered_df.show()\n\n# pass whether the data is relevant to singapore or not to the downstream tasks\n\nprint('#{setValue(is_relevant=%s)}' % str(True if filtered_df.count()==1 else False))\n\n\n\n\n# stop Spark session\nspark.stop()\n",
  "resourceList" : [ ]
}
[INFO] 2024-04-24 16:20:08.485 +0800 - Success initialized task plugin instance successfully
[INFO] 2024-04-24 16:20:08.485 +0800 - Set taskVarPool: [{"prop":"message","direct":"IN","type":"VARCHAR","value":""}] successfully
[INFO] 2024-04-24 16:20:08.485 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:20:08.485 +0800 - *********************************  Execute task instance  *************************************
[INFO] 2024-04-24 16:20:08.485 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:20:08.487 +0800 - raw python script : import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col
from pyspark.sql.types import StringType
from pyspark import SparkFiles

# Initialize Spark session in local mode
spark = SparkSession.builder \
    .appName("Reddit Keyword Filtering") \
    .master("local") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1") \
    .config("spark.driver.extraJavaOptions", "-Divy.cache.dir=/tmp -Divy.home=/tmp") \
    .getOrCreate()

# message = ${message}
message = {
  "user": "premiumplatinum",
  "content": "singapore is stupid",
  "url": "https://www.reddit.com/r/singapore/comments/1c9itat/21apr2024_orchard_road_camcar_turning_right_into/",
  "context": "21apr2024 orchard road camcar turning right into centrepoint get tbone by cyclist",
  "score": 131,
  "subreddit": "singapore",
  "type": "post",
  "id": "1c9itat",
  "datetime": "2024-04-21 22:10:42"
}

rdd = spark.sparkContext.parallelize([message])
df = spark.read.json(rdd)

# filter rows containing specific keywords
keywords = [${keywords}]

# initialize the filter condition with False
filter_condition = col("content").contains(keywords[0])

# loop through the rest of the keywords and update the filter condition
for keyword in keywords[1:]:
    filter_condition = filter_condition | col("content").contains(keyword)

# apply the filter condition to the DataFrame
filtered_df = df.filter(filter_condition)
filtered_df.show()

# pass whether the data is relevant to singapore or not to the downstream tasks

print('#{setValue(is_relevant=%s)}' % str(True if filtered_df.count()==1 else False))




# stop Spark session
spark.stop()

[INFO] 2024-04-24 16:20:08.488 +0800 - tenantCode :default, task dir:/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485
[INFO] 2024-04-24 16:20:08.490 +0800 - generate python script file:/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485/py_585_1485.py
[INFO] 2024-04-24 16:20:08.490 +0800 - #-*- encoding=utf8 -*-

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col
from pyspark.sql.types import StringType
from pyspark import SparkFiles

# Initialize Spark session in local mode
spark = SparkSession.builder \
    .appName("Reddit Keyword Filtering") \
    .master("local") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1") \
    .config("spark.driver.extraJavaOptions", "-Divy.cache.dir=/tmp -Divy.home=/tmp") \
    .getOrCreate()

# message = 
message = {
  "user": "premiumplatinum",
  "content": "singapore is stupid",
  "url": "https://www.reddit.com/r/singapore/comments/1c9itat/21apr2024_orchard_road_camcar_turning_right_into/",
  "context": "21apr2024 orchard road camcar turning right into centrepoint get tbone by cyclist",
  "score": 131,
  "subreddit": "singapore",
  "type": "post",
  "id": "1c9itat",
  "datetime": "2024-04-21 22:10:42"
}

rdd = spark.sparkContext.parallelize([message])
df = spark.read.json(rdd)

# filter rows containing specific keywords
keywords = ["singapore", "lol"]

# initialize the filter condition with False
filter_condition = col("content").contains(keywords[0])

# loop through the rest of the keywords and update the filter condition
for keyword in keywords[1:]:
    filter_condition = filter_condition | col("content").contains(keyword)

# apply the filter condition to the DataFrame
filtered_df = df.filter(filter_condition)
filtered_df.show()

# pass whether the data is relevant to singapore or not to the downstream tasks

print('#{setValue(is_relevant=%s)}' % str(True if filtered_df.count()==1 else False))




# stop Spark session
spark.stop()

[INFO] 2024-04-24 16:20:08.492 +0800 - Final Shell file is: 
[INFO] 2024-04-24 16:20:08.492 +0800 - ****************************** Script Content *****************************************************************
[INFO] 2024-04-24 16:20:08.492 +0800 - #!/bin/bash
BASEDIR=$(cd `dirname $0`; pwd)
cd $BASEDIR
export SPARK_HOME=/opt/spark-3.5.1-bin-hadoop3-scala2.13
export JAVA_HOME=/opt/java/openjdk
export PYSPARK_DRIVER_PYTHON=/bin/python3.11
export PYTHON_LAUNCHER=/bin/python3.11
export PYSPARK_PYTHON=/bin/python3.11
${PYTHON_LAUNCHER} /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485/py_585_1485.py
[INFO] 2024-04-24 16:20:08.492 +0800 - ****************************** Script Content *****************************************************************
[INFO] 2024-04-24 16:20:08.492 +0800 - Executing shell command : sudo -u default -i /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485/585_1485.sh
[INFO] 2024-04-24 16:20:08.497 +0800 - process start, process id is: 340
[INFO] 2024-04-24 16:20:09.500 +0800 -  -> 
	sudo: unable to change directory to /home/default: No such file or directory
[INFO] 2024-04-24 16:20:10.531 +0800 -  -> 
	:: loading settings :: url = jar:file:/opt/spark-3.5.1-bin-hadoop3-scala2.13/jars/ivy-2.5.1.jar!/org/apache/ivy/core/settings/ivysettings.xml
[INFO] 2024-04-24 16:20:11.534 +0800 -  -> 
	Ivy Default Cache set to: /tmp
	The jars for the packages stored in: /tmp/jars
	org.apache.spark#spark-sql-kafka-0-10_2.13 added as a dependency
	:: resolving dependencies :: org.apache.spark#spark-submit-parent-21452fe6-e46a-40c3-913c-d6b84c6010bf;1.0
		confs: [default]
		found org.apache.spark#spark-sql-kafka-0-10_2.13;3.5.1 in central
		found org.apache.spark#spark-token-provider-kafka-0-10_2.13;3.5.1 in central
		found org.apache.kafka#kafka-clients;3.4.1 in central
		found org.lz4#lz4-java;1.8.0 in central
		found org.xerial.snappy#snappy-java;1.1.10.3 in central
		found org.slf4j#slf4j-api;2.0.7 in central
		found org.apache.hadoop#hadoop-client-runtime;3.3.4 in central
		found org.apache.hadoop#hadoop-client-api;3.3.4 in central
		found commons-logging#commons-logging;1.1.3 in central
		found com.google.code.findbugs#jsr305;3.0.0 in central
		found org.scala-lang.modules#scala-parallel-collections_2.13;1.0.4 in central
		found org.apache.commons#commons-pool2;2.11.1 in central
[INFO] 2024-04-24 16:20:12.535 +0800 -  -> 
	downloading https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-client-runtime/3.3.4/hadoop-client-runtime-3.3.4.jar ...
[INFO] 2024-04-24 16:21:15.671 +0800 -  -> 
		[SUCCESSFUL ] org.apache.hadoop#hadoop-client-runtime;3.3.4!hadoop-client-runtime.jar (64495ms)
	downloading https://repo1.maven.org/maven2/org/lz4/lz4-java/1.8.0/lz4-java-1.8.0.jar ...
[INFO] 2024-04-24 16:21:16.673 +0800 -  -> 
		[SUCCESSFUL ] org.lz4#lz4-java;1.8.0!lz4-java.jar (724ms)
	downloading https://repo1.maven.org/maven2/org/xerial/snappy/snappy-java/1.1.10.3/snappy-java-1.1.10.3.jar ...
[INFO] 2024-04-24 16:21:17.681 +0800 -  -> 
		[SUCCESSFUL ] org.xerial.snappy#snappy-java;1.1.10.3!snappy-java.jar(bundle) (1363ms)
[INFO] 2024-04-24 16:21:18.684 +0800 -  -> 
	downloading https://repo1.maven.org/maven2/org/slf4j/slf4j-api/2.0.7/slf4j-api-2.0.7.jar ...
		[SUCCESSFUL ] org.slf4j#slf4j-api;2.0.7!slf4j-api.jar (413ms)
	downloading https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-client-api/3.3.4/hadoop-client-api-3.3.4.jar ...
[INFO] 2024-04-24 16:21:42.714 +0800 -  -> 
		[SUCCESSFUL ] org.apache.hadoop#hadoop-client-api;3.3.4!hadoop-client-api.jar (23837ms)
	downloading https://repo1.maven.org/maven2/commons-logging/commons-logging/1.1.3/commons-logging-1.1.3.jar ...
		[SUCCESSFUL ] commons-logging#commons-logging;1.1.3!commons-logging.jar (421ms)
	:: resolution report :: resolve 346ms :: artifacts dl 91292ms
		:: modules in use:
		com.google.code.findbugs#jsr305;3.0.0 from central in [default]
		commons-logging#commons-logging;1.1.3 from central in [default]
		org.apache.commons#commons-pool2;2.11.1 from central in [default]
		org.apache.hadoop#hadoop-client-api;3.3.4 from central in [default]
		org.apache.hadoop#hadoop-client-runtime;3.3.4 from central in [default]
		org.apache.kafka#kafka-clients;3.4.1 from central in [default]
		org.apache.spark#spark-sql-kafka-0-10_2.13;3.5.1 from central in [default]
		org.apache.spark#spark-token-provider-kafka-0-10_2.13;3.5.1 from central in [default]
		org.lz4#lz4-java;1.8.0 from central in [default]
		org.scala-lang.modules#scala-parallel-collections_2.13;1.0.4 from central in [default]
		org.slf4j#slf4j-api;2.0.7 from central in [default]
		org.xerial.snappy#snappy-java;1.1.10.3 from central in [default]
		---------------------------------------------------------------------
		|                  |            modules            ||   artifacts   |
		|       conf       | number| search|dwnlded|evicted|| number|dwnlded|
		---------------------------------------------------------------------
		|      default     |   12  |   0   |   0   |   0   ||   12  |   6   |
		---------------------------------------------------------------------
	:: retrieving :: org.apache.spark#spark-submit-parent-21452fe6-e46a-40c3-913c-d6b84c6010bf
		confs: [default]
		12 artifacts copied, 0 already retrieved (57876kB/78ms)
	24/04/24 16:21:42 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
[INFO] 2024-04-24 16:21:43.727 +0800 -  -> 
	Setting default log level to "WARN".
	To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
[INFO] 2024-04-24 16:21:52.741 +0800 -  -> 
	
	[Stage 0:>                                                          (0 + 1) / 1]
[INFO] 2024-04-24 16:21:53.744 +0800 -  -> 
	
	                                                                                
[INFO] 2024-04-24 16:21:55.746 +0800 -  -> 
	+-------------------+--------------------+-------------------+-------+-----+---------+----+--------------------+---------------+
	|            content|             context|           datetime|     id|score|subreddit|type|                 url|           user|
	+-------------------+--------------------+-------------------+-------+-----+---------+----+--------------------+---------------+
	|singapore is stupid|21apr2024 orchard...|2024-04-21 22:10:42|1c9itat|  131|singapore|post|https://www.reddi...|premiumplatinum|
	+-------------------+--------------------+-------------------+-------+-----+---------+----+--------------------+---------------+
	
	#{setValue(is_relevant=True)}
[INFO] 2024-04-24 16:21:56.748 +0800 - process has exited. execute path:/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485, processId:340 ,exitStatusCode:0 ,processWaitForStatus:true ,processExitValue:0
[INFO] 2024-04-24 16:21:56.751 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:21:56.751 +0800 - *********************************  Finalize task instance  ************************************
[INFO] 2024-04-24 16:21:56.751 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 16:21:56.753 +0800 - Upload output files: [] successfully
[INFO] 2024-04-24 16:21:56.772 +0800 - Send task execute status: SUCCESS to master : 172.18.1.1:1234
[INFO] 2024-04-24 16:21:56.773 +0800 - Remove the current task execute context from worker cache
[INFO] 2024-04-24 16:21:56.773 +0800 - The current execute mode isn't develop mode, will clear the task execute file: /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485
[INFO] 2024-04-24 16:21:56.774 +0800 - Success clear the task execute file: /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_6/585/1485
[INFO] 2024-04-24 16:21:56.775 +0800 - FINALIZE_SESSION
