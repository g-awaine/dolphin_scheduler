[INFO] 2024-04-24 17:38:36.472 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:36.473 +0800 - *********************************  Initialize task context  ***********************************
[INFO] 2024-04-24 17:38:36.474 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:36.474 +0800 - Begin to initialize task
[INFO] 2024-04-24 17:38:36.475 +0800 - Set task startTime: 1713951516475
[INFO] 2024-04-24 17:38:36.475 +0800 - Set task appId: 599_1527
[INFO] 2024-04-24 17:38:36.475 +0800 - End initialize task {
  "taskInstanceId" : 1527,
  "taskName" : "keyword filtering",
  "firstSubmitTime" : 1713951516455,
  "startTime" : 1713951516475,
  "taskType" : "PYTHON",
  "workflowInstanceHost" : "172.18.0.9:5678",
  "host" : "172.18.1.1:1234",
  "logPath" : "/opt/dolphinscheduler/logs/20240424/13377949373536/11/599/1527.log",
  "processId" : 0,
  "processDefineCode" : 13377949373536,
  "processDefineVersion" : 11,
  "processInstanceId" : 599,
  "scheduleTime" : 0,
  "globalParams" : "[{\"prop\":\"keywords\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"\\\"singapore\\\", \\\"lol\\\"\"}]",
  "executorId" : 1,
  "cmdTypeIfComplement" : 0,
  "tenantCode" : "default",
  "processDefineId" : 0,
  "projectId" : 0,
  "projectCode" : 13010050770016,
  "taskParams" : "{\"localParams\":[],\"rawScript\":\"import pyspark\\nfrom pyspark.sql import SparkSession\\nfrom pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col\\nfrom pyspark.sql.types import StringType\\nfrom pyspark import SparkFiles\\n\\n# Initialize Spark session in local mode\\nspark = SparkSession.builder \\\\\\n    .appName(\\\"Reddit Keyword Filtering\\\") \\\\\\n    .master(\\\"local\\\") \\\\\\n    .config(\\\"spark.jars.packages\\\", \\\"org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1\\\") \\\\\\n    .config(\\\"spark.driver.extraJavaOptions\\\", \\\"-Divy.cache.dir=/tmp -Divy.home=/tmp\\\") \\\\\\n    .getOrCreate()\\n\\nmessage = ${message}\\n\\nrdd = spark.sparkContext.parallelize([message])\\ndf = spark.read.json(rdd)\\n\\n# filter rows containing specific keywords\\nkeywords = [' ', 'sdf', 'sdfsdfsdf']\\n\\n# initialize the filter condition with False\\nfilter_condition = col(\\\"content\\\").contains(keywords[0])\\n\\n# loop through the rest of the keywords and update the filter condition\\nfor keyword in keywords[1:]:\\n    filter_condition = filter_condition | col(\\\"content\\\").contains(keyword)\\n\\n# apply the filter condition to the DataFrame\\nfiltered_df = df.filter(filter_condition)\\nfiltered_df.show()\\n\\nis_relevant = True if filtered_df.count()==1 else False\\n\\nfiltered_json = filtered_df.toJSON().collect()\\n\\n# define the parameters for the kafka broker and topic\\nkafka_params = {\\n    \\\"kafka.bootstrap.servers\\\": \\\"kafka:9092\\\",  # Kafka broker address\\n    \\\"topic\\\": \\\"reddit_filtered\\\"  # Kafka topic name\\n}\\n\\n# write data to Kafka\\nif is_relevant:\\n    spark \\\\\\n        .createDataFrame(filtered_json, StringType()) \\\\\\n        .write \\\\\\n        .format(\\\"kafka\\\") \\\\\\n        .options(**kafka_params) \\\\\\n        .save()\\n\\n\",\"resourceList\":[]}",
  "environmentConfig" : "export SPARK_HOME=/opt/spark-3.5.1-bin-hadoop3-scala2.13\nexport JAVA_HOME=/opt/java/openjdk\nexport PYSPARK_DRIVER_PYTHON=/bin/python3.11\nexport PYTHON_LAUNCHER=/bin/python3.11\nexport PYSPARK_PYTHON=/bin/python3.11",
  "prepareParamsMap" : {
    "system.task.definition.name" : {
      "prop" : "system.task.definition.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "keyword filtering"
    },
    "system.project.name" : {
      "prop" : "system.project.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : null
    },
    "REDDIT_HOME" : {
      "prop" : "REDDIT_HOME",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "/local_storage/reddit"
    },
    "keywords" : {
      "prop" : "keywords",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "\"singapore\", \"lol\""
    },
    "system.biz.curdate" : {
      "prop" : "system.biz.curdate",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240424"
    },
    "system.task.instance.id" : {
      "prop" : "system.task.instance.id",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "1527"
    },
    "system.task.definition.code" : {
      "prop" : "system.task.definition.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13377752024032"
    },
    "system.datetime" : {
      "prop" : "system.datetime",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240424173836"
    },
    "system.project.code" : {
      "prop" : "system.project.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13010050770016"
    },
    "system.workflow.instance.id" : {
      "prop" : "system.workflow.instance.id",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "599"
    },
    "system.biz.date" : {
      "prop" : "system.biz.date",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240423"
    },
    "system.workflow.definition.name" : {
      "prop" : "system.workflow.definition.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "filter_post"
    },
    "system.workflow.definition.code" : {
      "prop" : "system.workflow.definition.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13377949373536"
    }
  },
  "taskAppId" : "599_1527",
  "taskTimeout" : 2147483647,
  "workerGroup" : "default",
  "delayTime" : 0,
  "currentExecutionStatus" : "SUBMITTED_SUCCESS",
  "endTime" : 0,
  "varPool" : "[]",
  "dryRun" : 0,
  "paramsMap" : { },
  "cpuQuota" : -1,
  "memoryMax" : -1,
  "testFlag" : 0,
  "logBufferEnable" : false,
  "dispatchFailTimes" : 0
}
[INFO] 2024-04-24 17:38:36.475 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:36.475 +0800 - *********************************  Load task instance plugin  *********************************
[INFO] 2024-04-24 17:38:36.475 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:36.498 +0800 - Send task status RUNNING_EXECUTION master: 172.18.1.1:1234
[INFO] 2024-04-24 17:38:36.499 +0800 - TenantCode: default check successfully
[INFO] 2024-04-24 17:38:36.501 +0800 - WorkflowInstanceExecDir: /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527 check successfully
[INFO] 2024-04-24 17:38:36.501 +0800 - Create TaskChannel: org.apache.dolphinscheduler.plugin.task.python.PythonTaskChannel successfully
[INFO] 2024-04-24 17:38:36.501 +0800 - Download resources successfully: 
ResourceContext(resourceItemMap={})
[INFO] 2024-04-24 17:38:36.502 +0800 - Download upstream files: [] successfully
[INFO] 2024-04-24 17:38:36.502 +0800 - Task plugin instance: PYTHON create successfully
[INFO] 2024-04-24 17:38:36.502 +0800 - Initialize python task params {
  "localParams" : [ ],
  "varPool" : null,
  "rawScript" : "import pyspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col\nfrom pyspark.sql.types import StringType\nfrom pyspark import SparkFiles\n\n# Initialize Spark session in local mode\nspark = SparkSession.builder \\\n    .appName(\"Reddit Keyword Filtering\") \\\n    .master(\"local\") \\\n    .config(\"spark.jars.packages\", \"org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1\") \\\n    .config(\"spark.driver.extraJavaOptions\", \"-Divy.cache.dir=/tmp -Divy.home=/tmp\") \\\n    .getOrCreate()\n\nmessage = ${message}\n\nrdd = spark.sparkContext.parallelize([message])\ndf = spark.read.json(rdd)\n\n# filter rows containing specific keywords\nkeywords = [' ', 'sdf', 'sdfsdfsdf']\n\n# initialize the filter condition with False\nfilter_condition = col(\"content\").contains(keywords[0])\n\n# loop through the rest of the keywords and update the filter condition\nfor keyword in keywords[1:]:\n    filter_condition = filter_condition | col(\"content\").contains(keyword)\n\n# apply the filter condition to the DataFrame\nfiltered_df = df.filter(filter_condition)\nfiltered_df.show()\n\nis_relevant = True if filtered_df.count()==1 else False\n\nfiltered_json = filtered_df.toJSON().collect()\n\n# define the parameters for the kafka broker and topic\nkafka_params = {\n    \"kafka.bootstrap.servers\": \"kafka:9092\",  # Kafka broker address\n    \"topic\": \"reddit_filtered\"  # Kafka topic name\n}\n\n# write data to Kafka\nif is_relevant:\n    spark \\\n        .createDataFrame(filtered_json, StringType()) \\\n        .write \\\n        .format(\"kafka\") \\\n        .options(**kafka_params) \\\n        .save()\n\n",
  "resourceList" : [ ]
}
[INFO] 2024-04-24 17:38:36.502 +0800 - Success initialized task plugin instance successfully
[INFO] 2024-04-24 17:38:36.502 +0800 - Set taskVarPool: [] successfully
[INFO] 2024-04-24 17:38:36.502 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:36.503 +0800 - *********************************  Execute task instance  *************************************
[INFO] 2024-04-24 17:38:36.503 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:36.503 +0800 - raw python script : import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col
from pyspark.sql.types import StringType
from pyspark import SparkFiles

# Initialize Spark session in local mode
spark = SparkSession.builder \
    .appName("Reddit Keyword Filtering") \
    .master("local") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1") \
    .config("spark.driver.extraJavaOptions", "-Divy.cache.dir=/tmp -Divy.home=/tmp") \
    .getOrCreate()

message = ${message}

rdd = spark.sparkContext.parallelize([message])
df = spark.read.json(rdd)

# filter rows containing specific keywords
keywords = [' ', 'sdf', 'sdfsdfsdf']

# initialize the filter condition with False
filter_condition = col("content").contains(keywords[0])

# loop through the rest of the keywords and update the filter condition
for keyword in keywords[1:]:
    filter_condition = filter_condition | col("content").contains(keyword)

# apply the filter condition to the DataFrame
filtered_df = df.filter(filter_condition)
filtered_df.show()

is_relevant = True if filtered_df.count()==1 else False

filtered_json = filtered_df.toJSON().collect()

# define the parameters for the kafka broker and topic
kafka_params = {
    "kafka.bootstrap.servers": "kafka:9092",  # Kafka broker address
    "topic": "reddit_filtered"  # Kafka topic name
}

# write data to Kafka
if is_relevant:
    spark \
        .createDataFrame(filtered_json, StringType()) \
        .write \
        .format("kafka") \
        .options(**kafka_params) \
        .save()


[INFO] 2024-04-24 17:38:36.503 +0800 - tenantCode :default, task dir:/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527
[INFO] 2024-04-24 17:38:36.503 +0800 - generate python script file:/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527/py_599_1527.py
[INFO] 2024-04-24 17:38:36.503 +0800 - #-*- encoding=utf8 -*-

import pyspark
from pyspark.sql import SparkSession
from pyspark.sql.functions import concat, lit, split, udf, from_unixtime, col
from pyspark.sql.types import StringType
from pyspark import SparkFiles

# Initialize Spark session in local mode
spark = SparkSession.builder \
    .appName("Reddit Keyword Filtering") \
    .master("local") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.13:3.5.1") \
    .config("spark.driver.extraJavaOptions", "-Divy.cache.dir=/tmp -Divy.home=/tmp") \
    .getOrCreate()

message = ${message}

rdd = spark.sparkContext.parallelize([message])
df = spark.read.json(rdd)

# filter rows containing specific keywords
keywords = [' ', 'sdf', 'sdfsdfsdf']

# initialize the filter condition with False
filter_condition = col("content").contains(keywords[0])

# loop through the rest of the keywords and update the filter condition
for keyword in keywords[1:]:
    filter_condition = filter_condition | col("content").contains(keyword)

# apply the filter condition to the DataFrame
filtered_df = df.filter(filter_condition)
filtered_df.show()

is_relevant = True if filtered_df.count()==1 else False

filtered_json = filtered_df.toJSON().collect()

# define the parameters for the kafka broker and topic
kafka_params = {
    "kafka.bootstrap.servers": "kafka:9092",  # Kafka broker address
    "topic": "reddit_filtered"  # Kafka topic name
}

# write data to Kafka
if is_relevant:
    spark \
        .createDataFrame(filtered_json, StringType()) \
        .write \
        .format("kafka") \
        .options(**kafka_params) \
        .save()


[INFO] 2024-04-24 17:38:36.504 +0800 - Final Shell file is: 
[INFO] 2024-04-24 17:38:36.504 +0800 - ****************************** Script Content *****************************************************************
[INFO] 2024-04-24 17:38:36.504 +0800 - #!/bin/bash
BASEDIR=$(cd `dirname $0`; pwd)
cd $BASEDIR
export SPARK_HOME=/opt/spark-3.5.1-bin-hadoop3-scala2.13
export JAVA_HOME=/opt/java/openjdk
export PYSPARK_DRIVER_PYTHON=/bin/python3.11
export PYTHON_LAUNCHER=/bin/python3.11
export PYSPARK_PYTHON=/bin/python3.11
${PYTHON_LAUNCHER} /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527/py_599_1527.py
[INFO] 2024-04-24 17:38:36.504 +0800 - ****************************** Script Content *****************************************************************
[INFO] 2024-04-24 17:38:36.504 +0800 - Executing shell command : sudo -u default -i /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527/599_1527.sh
[INFO] 2024-04-24 17:38:36.525 +0800 - process start, process id is: 4529
[INFO] 2024-04-24 17:38:36.525 +0800 -  -> 
	sudo: unable to change directory to /home/default: No such file or directory
[INFO] 2024-04-24 17:38:37.534 +0800 -  -> 
	  File "/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527/py_599_1527.py", line 17
	    message = ${message}
	              ^
	SyntaxError: invalid syntax
[INFO] 2024-04-24 17:38:37.552 +0800 - process has exited. execute path:/tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527, processId:4529 ,exitStatusCode:1 ,processWaitForStatus:true ,processExitValue:1
[INFO] 2024-04-24 17:38:37.557 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:37.557 +0800 - *********************************  Finalize task instance  ************************************
[INFO] 2024-04-24 17:38:37.557 +0800 - ***********************************************************************************************
[INFO] 2024-04-24 17:38:37.558 +0800 - Upload output files: [] successfully
[INFO] 2024-04-24 17:38:37.569 +0800 - Send task execute status: FAILURE to master : 172.18.1.1:1234
[INFO] 2024-04-24 17:38:37.569 +0800 - Remove the current task execute context from worker cache
[INFO] 2024-04-24 17:38:37.570 +0800 - The current execute mode isn't develop mode, will clear the task execute file: /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527
[INFO] 2024-04-24 17:38:37.571 +0800 - Success clear the task execute file: /tmp/dolphinscheduler/exec/process/default/13010050770016/13377949373536_11/599/1527
[INFO] 2024-04-24 17:38:37.571 +0800 - FINALIZE_SESSION
