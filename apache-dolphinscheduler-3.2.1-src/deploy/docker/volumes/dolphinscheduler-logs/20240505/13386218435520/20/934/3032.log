[INFO] 2024-05-05 00:03:39.353 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:03:39.410 +0800 - *********************************  Initialize task context  ***********************************
[INFO] 2024-05-05 00:03:39.411 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:03:39.411 +0800 - Begin to initialize task
[INFO] 2024-05-05 00:03:39.411 +0800 - Set task startTime: 1714838619411
[INFO] 2024-05-05 00:03:39.412 +0800 - Set task appId: 934_3032
[INFO] 2024-05-05 00:03:39.412 +0800 - End initialize task {
  "taskInstanceId" : 3032,
  "taskName" : "sentiment analysis",
  "firstSubmitTime" : 1714838619183,
  "startTime" : 1714838619411,
  "taskType" : "PYTHON",
  "workflowInstanceHost" : "172.18.0.11:5678",
  "host" : "172.18.1.1:1234",
  "logPath" : "/opt/dolphinscheduler/logs/20240505/13386218435520/20/934/3032.log",
  "processId" : 0,
  "processDefineCode" : 13386218435520,
  "processDefineVersion" : 20,
  "processInstanceId" : 934,
  "scheduleTime" : 0,
  "globalParams" : "[{\"prop\":\"topics\",\"direct\":\"IN\",\"type\":\"VARCHAR\",\"value\":\"\\\"reddit_post_filtered|reddit_post_sa\\\",\\\"gnews_filtered|gnews_sa\\\"\"}]",
  "executorId" : 1,
  "cmdTypeIfComplement" : 7,
  "tenantCode" : "default",
  "processDefineId" : 0,
  "projectId" : 0,
  "projectCode" : 13010050770016,
  "taskParams" : "{\"localParams\":[],\"rawScript\":\"# use kafka streaming api\\nfrom pyspark.sql.functions import udf, col, from_json\\nfrom pyspark.sql.types import FloatType, ArrayType, StringType, StructType, StructField, IntegerType\\nimport nltk\\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA\\nfrom pyspark.sql import SparkSession\\nimport os\\n\\n# access the nltk data directory variable\\nnltk_data_dir = os.environ.get('NLTK_DATA')\\n\\n# download the model\\nnltk.download('vader_lexicon', download_dir=nltk_data_dir)\\n\\n# init the sentiment analysis object\\nsia = SIA()\\n\\n# init Spark session\\nspark = SparkSession.builder \\\\\\n    .master('local') \\\\\\n    .appName(\\\"Sentiment Analysis\\\") \\\\\\n    .config(\\\"spark.jars.packages\\\", \\\"org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1\\\") \\\\\\n    .config(\\\"spark.sql.streaming.checkpointLocation\\\", r\\\"/tmp/\\\") \\\\\\n    .config(\\\"spark.driver.extraJavaOptions\\\", \\\"-Divy.cache.dir=/tmp -Divy.home=/tmp\\\") \\\\\\n    .getOrCreate()\\n\\n# define a udf to perform sentiment analysis\\ndef analyze_sentiment(message):\\n    # Perform sentiment analysis\\n    pol_score = sia.polarity_scores(message)\\n    # Return the compound score\\n    return [pol_score['neg'], pol_score['neu'], pol_score['pos'], pol_score['compound']]\\n\\n# Register the function as a UDF\\nanalyze_sentiment_udf = udf(lambda x:analyze_sentiment(x), ArrayType(FloatType()))\\n\\n# define the schema for the JSON data\\nschema = StructType([\\n    StructField(\\\"authors\\\", StringType(), nullable=True),\\n    StructField(\\\"content\\\", StringType(), nullable=True),\\n    StructField(\\\"url\\\", StringType(), nullable=True),\\n    StructField(\\\"context\\\", StringType(), nullable=True),\\n    StructField(\\\"type\\\", StringType(), nullable=True),\\n    StructField(\\\"datetime\\\", StringType(), nullable=True)  # Assuming the datetime is string type, you can change it to TimestampType if needed\\n])\\n\\n# parse the input parameter\\ntopics = ${topics}\\nparsed_topics = topics.split(\\\"|\\\")\\n\\n# define the parameters for the input and output kafka broker and topic\\nkafka_broker = \\\"kafka:9092\\\"\\ninput_kafka_topic = parsed_topics[0]\\noutput_kafka_topic = parsed_topics[1]\\n\\n# Subscribe to the input topic\\ndf = spark \\\\\\n    .readStream \\\\\\n    .format(\\\"kafka\\\") \\\\\\n    .option(\\\"kafka.bootstrap.servers\\\", kafka_broker) \\\\\\n    .option(\\\"subscribe\\\", input_kafka_topic) \\\\\\n    .load()\\n\\n# parse the JSON data in the 'value' column using the defined schema then create a dataframe containing the reddit data\\ndf = df.select(col(\\\"value\\\").cast(\\\"string\\\")) \\\\\\n    .withColumn(\\\"value\\\", from_json(\\\"value\\\", schema)) \\\\\\n\\nparsed_df = df \\\\\\n    .select(\\\"value.*\\\")\\n\\n# perform sentiment analysis on the parsed dataframe \\nsa_reddit_df = parsed_df.withColumn('sentiment_score', analyze_sentiment_udf(parsed_df['content']))\\n\\n# split the sentiment_score column into separate columns\\nsa_reddit_df = sa_reddit_df.withColumn(\\\"negative\\\", sa_reddit_df[\\\"sentiment_score\\\"][0]) \\\\\\n            .withColumn(\\\"neutral\\\", sa_reddit_df[\\\"sentiment_score\\\"][1]) \\\\\\n            .withColumn(\\\"positive\\\", sa_reddit_df[\\\"sentiment_score\\\"][2]) \\\\\\n            .withColumn(\\\"compound\\\", sa_reddit_df[\\\"sentiment_score\\\"][3]) \\\\\\n            .drop('sentiment_score')  # drop sentiment_score column after splitting\\n\\n# stream the data to kafka\\nkafka_write = sa_reddit_df \\\\\\n    .selectExpr(\\\"'' AS key\\\", \\\"to_json(struct(*)) AS value\\\") \\\\\\n    .writeStream \\\\\\n    .format(\\\"kafka\\\") \\\\\\n    .option(\\\"kafka.bootstrap.servers\\\", kafka_broker) \\\\\\n    .option(\\\"topic\\\", output_kafka_topic) \\\\\\n    .start()\\n\\n# Wait for the termination of the query\\nkafka_write.awaitTermination()\",\"resourceList\":[]}",
  "environmentConfig" : "export SPARK_HOME=/opt/spark-3.5.1-bin-hadoop3\nexport JAVA_HOME=/opt/java/openjdk\nexport PYSPARK_DRIVER_PYTHON=/bin/python3.11\nexport PYSPARK_PYTHON=/bin/python3.11\nexport PYTHON_LAUNCHER=/bin/python3.11\nexport NLTK_DATA=/local_storage/nltk_data",
  "prepareParamsMap" : {
    "GNEWS_HOME" : {
      "prop" : "GNEWS_HOME",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "/local_storage/google_news"
    },
    "system.task.definition.name" : {
      "prop" : "system.task.definition.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "sentiment analysis"
    },
    "system.project.name" : {
      "prop" : "system.project.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : null
    },
    "REDDIT_HOME" : {
      "prop" : "REDDIT_HOME",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "/local_storage/reddit"
    },
    "topics" : {
      "prop" : "topics",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "\"reddit_post_filtered|reddit_post_sa\",\"gnews_filtered|gnews_sa\""
    },
    "system.biz.curdate" : {
      "prop" : "system.biz.curdate",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240505"
    },
    "system.task.instance.id" : {
      "prop" : "system.task.instance.id",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "3032"
    },
    "system.task.definition.code" : {
      "prop" : "system.task.definition.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13386027735104"
    },
    "system.datetime" : {
      "prop" : "system.datetime",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240505000339"
    },
    "system.project.code" : {
      "prop" : "system.project.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13010050770016"
    },
    "system.workflow.instance.id" : {
      "prop" : "system.workflow.instance.id",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "934"
    },
    "system.biz.date" : {
      "prop" : "system.biz.date",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "20240504"
    },
    "system.workflow.definition.name" : {
      "prop" : "system.workflow.definition.name",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "sentiment_analysis_subprocess"
    },
    "system.workflow.definition.code" : {
      "prop" : "system.workflow.definition.code",
      "direct" : "IN",
      "type" : "VARCHAR",
      "value" : "13386218435520"
    }
  },
  "taskAppId" : "934_3032",
  "taskTimeout" : 2147483647,
  "workerGroup" : "default",
  "delayTime" : 0,
  "currentExecutionStatus" : "SUBMITTED_SUCCESS",
  "endTime" : 0,
  "dryRun" : 0,
  "paramsMap" : { },
  "cpuQuota" : -1,
  "memoryMax" : -1,
  "testFlag" : 0,
  "logBufferEnable" : false,
  "dispatchFailTimes" : 0
}
[INFO] 2024-05-05 00:03:39.436 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:03:39.524 +0800 - *********************************  Load task instance plugin  *********************************
[INFO] 2024-05-05 00:03:39.551 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:03:39.588 +0800 - Send task status RUNNING_EXECUTION master: 172.18.1.1:1234
[INFO] 2024-05-05 00:03:39.589 +0800 - TenantCode: default check successfully
[INFO] 2024-05-05 00:03:39.604 +0800 - WorkflowInstanceExecDir: /tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032 check successfully
[INFO] 2024-05-05 00:03:39.622 +0800 - Create TaskChannel: org.apache.dolphinscheduler.plugin.task.python.PythonTaskChannel successfully
[INFO] 2024-05-05 00:03:39.645 +0800 - Download resources successfully: 
ResourceContext(resourceItemMap={})
[INFO] 2024-05-05 00:03:39.652 +0800 - Download upstream files: [] successfully
[INFO] 2024-05-05 00:03:39.652 +0800 - Task plugin instance: PYTHON create successfully
[INFO] 2024-05-05 00:03:39.653 +0800 - Initialize python task params {
  "localParams" : [ ],
  "varPool" : null,
  "rawScript" : "# use kafka streaming api\nfrom pyspark.sql.functions import udf, col, from_json\nfrom pyspark.sql.types import FloatType, ArrayType, StringType, StructType, StructField, IntegerType\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA\nfrom pyspark.sql import SparkSession\nimport os\n\n# access the nltk data directory variable\nnltk_data_dir = os.environ.get('NLTK_DATA')\n\n# download the model\nnltk.download('vader_lexicon', download_dir=nltk_data_dir)\n\n# init the sentiment analysis object\nsia = SIA()\n\n# init Spark session\nspark = SparkSession.builder \\\n    .master('local') \\\n    .appName(\"Sentiment Analysis\") \\\n    .config(\"spark.jars.packages\", \"org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1\") \\\n    .config(\"spark.sql.streaming.checkpointLocation\", r\"/tmp/\") \\\n    .config(\"spark.driver.extraJavaOptions\", \"-Divy.cache.dir=/tmp -Divy.home=/tmp\") \\\n    .getOrCreate()\n\n# define a udf to perform sentiment analysis\ndef analyze_sentiment(message):\n    # Perform sentiment analysis\n    pol_score = sia.polarity_scores(message)\n    # Return the compound score\n    return [pol_score['neg'], pol_score['neu'], pol_score['pos'], pol_score['compound']]\n\n# Register the function as a UDF\nanalyze_sentiment_udf = udf(lambda x:analyze_sentiment(x), ArrayType(FloatType()))\n\n# define the schema for the JSON data\nschema = StructType([\n    StructField(\"authors\", StringType(), nullable=True),\n    StructField(\"content\", StringType(), nullable=True),\n    StructField(\"url\", StringType(), nullable=True),\n    StructField(\"context\", StringType(), nullable=True),\n    StructField(\"type\", StringType(), nullable=True),\n    StructField(\"datetime\", StringType(), nullable=True)  # Assuming the datetime is string type, you can change it to TimestampType if needed\n])\n\n# parse the input parameter\ntopics = ${topics}\nparsed_topics = topics.split(\"|\")\n\n# define the parameters for the input and output kafka broker and topic\nkafka_broker = \"kafka:9092\"\ninput_kafka_topic = parsed_topics[0]\noutput_kafka_topic = parsed_topics[1]\n\n# Subscribe to the input topic\ndf = spark \\\n    .readStream \\\n    .format(\"kafka\") \\\n    .option(\"kafka.bootstrap.servers\", kafka_broker) \\\n    .option(\"subscribe\", input_kafka_topic) \\\n    .load()\n\n# parse the JSON data in the 'value' column using the defined schema then create a dataframe containing the reddit data\ndf = df.select(col(\"value\").cast(\"string\")) \\\n    .withColumn(\"value\", from_json(\"value\", schema)) \\\n\nparsed_df = df \\\n    .select(\"value.*\")\n\n# perform sentiment analysis on the parsed dataframe \nsa_reddit_df = parsed_df.withColumn('sentiment_score', analyze_sentiment_udf(parsed_df['content']))\n\n# split the sentiment_score column into separate columns\nsa_reddit_df = sa_reddit_df.withColumn(\"negative\", sa_reddit_df[\"sentiment_score\"][0]) \\\n            .withColumn(\"neutral\", sa_reddit_df[\"sentiment_score\"][1]) \\\n            .withColumn(\"positive\", sa_reddit_df[\"sentiment_score\"][2]) \\\n            .withColumn(\"compound\", sa_reddit_df[\"sentiment_score\"][3]) \\\n            .drop('sentiment_score')  # drop sentiment_score column after splitting\n\n# stream the data to kafka\nkafka_write = sa_reddit_df \\\n    .selectExpr(\"'' AS key\", \"to_json(struct(*)) AS value\") \\\n    .writeStream \\\n    .format(\"kafka\") \\\n    .option(\"kafka.bootstrap.servers\", kafka_broker) \\\n    .option(\"topic\", output_kafka_topic) \\\n    .start()\n\n# Wait for the termination of the query\nkafka_write.awaitTermination()",
  "resourceList" : [ ]
}
[INFO] 2024-05-05 00:03:39.657 +0800 - Success initialized task plugin instance successfully
[INFO] 2024-05-05 00:03:39.734 +0800 - Set taskVarPool: null successfully
[INFO] 2024-05-05 00:03:39.781 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:03:39.782 +0800 - *********************************  Execute task instance  *************************************
[INFO] 2024-05-05 00:03:39.783 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:03:39.785 +0800 - raw python script : # use kafka streaming api
from pyspark.sql.functions import udf, col, from_json
from pyspark.sql.types import FloatType, ArrayType, StringType, StructType, StructField, IntegerType
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA
from pyspark.sql import SparkSession
import os

# access the nltk data directory variable
nltk_data_dir = os.environ.get('NLTK_DATA')

# download the model
nltk.download('vader_lexicon', download_dir=nltk_data_dir)

# init the sentiment analysis object
sia = SIA()

# init Spark session
spark = SparkSession.builder \
    .master('local') \
    .appName("Sentiment Analysis") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1") \
    .config("spark.sql.streaming.checkpointLocation", r"/tmp/") \
    .config("spark.driver.extraJavaOptions", "-Divy.cache.dir=/tmp -Divy.home=/tmp") \
    .getOrCreate()

# define a udf to perform sentiment analysis
def analyze_sentiment(message):
    # Perform sentiment analysis
    pol_score = sia.polarity_scores(message)
    # Return the compound score
    return [pol_score['neg'], pol_score['neu'], pol_score['pos'], pol_score['compound']]

# Register the function as a UDF
analyze_sentiment_udf = udf(lambda x:analyze_sentiment(x), ArrayType(FloatType()))

# define the schema for the JSON data
schema = StructType([
    StructField("authors", StringType(), nullable=True),
    StructField("content", StringType(), nullable=True),
    StructField("url", StringType(), nullable=True),
    StructField("context", StringType(), nullable=True),
    StructField("type", StringType(), nullable=True),
    StructField("datetime", StringType(), nullable=True)  # Assuming the datetime is string type, you can change it to TimestampType if needed
])

# parse the input parameter
topics = ${topics}
parsed_topics = topics.split("|")

# define the parameters for the input and output kafka broker and topic
kafka_broker = "kafka:9092"
input_kafka_topic = parsed_topics[0]
output_kafka_topic = parsed_topics[1]

# Subscribe to the input topic
df = spark \
    .readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", kafka_broker) \
    .option("subscribe", input_kafka_topic) \
    .load()

# parse the JSON data in the 'value' column using the defined schema then create a dataframe containing the reddit data
df = df.select(col("value").cast("string")) \
    .withColumn("value", from_json("value", schema)) \

parsed_df = df \
    .select("value.*")

# perform sentiment analysis on the parsed dataframe 
sa_reddit_df = parsed_df.withColumn('sentiment_score', analyze_sentiment_udf(parsed_df['content']))

# split the sentiment_score column into separate columns
sa_reddit_df = sa_reddit_df.withColumn("negative", sa_reddit_df["sentiment_score"][0]) \
            .withColumn("neutral", sa_reddit_df["sentiment_score"][1]) \
            .withColumn("positive", sa_reddit_df["sentiment_score"][2]) \
            .withColumn("compound", sa_reddit_df["sentiment_score"][3]) \
            .drop('sentiment_score')  # drop sentiment_score column after splitting

# stream the data to kafka
kafka_write = sa_reddit_df \
    .selectExpr("'' AS key", "to_json(struct(*)) AS value") \
    .writeStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", kafka_broker) \
    .option("topic", output_kafka_topic) \
    .start()

# Wait for the termination of the query
kafka_write.awaitTermination()
[INFO] 2024-05-05 00:03:39.793 +0800 - tenantCode :default, task dir:/tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032
[INFO] 2024-05-05 00:03:39.803 +0800 - generate python script file:/tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032/py_934_3032.py
[INFO] 2024-05-05 00:03:39.805 +0800 - #-*- encoding=utf8 -*-

# use kafka streaming api
from pyspark.sql.functions import udf, col, from_json
from pyspark.sql.types import FloatType, ArrayType, StringType, StructType, StructField, IntegerType
import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer as SIA
from pyspark.sql import SparkSession
import os

# access the nltk data directory variable
nltk_data_dir = os.environ.get('NLTK_DATA')

# download the model
nltk.download('vader_lexicon', download_dir=nltk_data_dir)

# init the sentiment analysis object
sia = SIA()

# init Spark session
spark = SparkSession.builder \
    .master('local') \
    .appName("Sentiment Analysis") \
    .config("spark.jars.packages", "org.apache.spark:spark-sql-kafka-0-10_2.12:3.5.1") \
    .config("spark.sql.streaming.checkpointLocation", r"/tmp/") \
    .config("spark.driver.extraJavaOptions", "-Divy.cache.dir=/tmp -Divy.home=/tmp") \
    .getOrCreate()

# define a udf to perform sentiment analysis
def analyze_sentiment(message):
    # Perform sentiment analysis
    pol_score = sia.polarity_scores(message)
    # Return the compound score
    return [pol_score['neg'], pol_score['neu'], pol_score['pos'], pol_score['compound']]

# Register the function as a UDF
analyze_sentiment_udf = udf(lambda x:analyze_sentiment(x), ArrayType(FloatType()))

# define the schema for the JSON data
schema = StructType([
    StructField("authors", StringType(), nullable=True),
    StructField("content", StringType(), nullable=True),
    StructField("url", StringType(), nullable=True),
    StructField("context", StringType(), nullable=True),
    StructField("type", StringType(), nullable=True),
    StructField("datetime", StringType(), nullable=True)  # Assuming the datetime is string type, you can change it to TimestampType if needed
])

# parse the input parameter
topics = "reddit_post_filtered|reddit_post_sa","gnews_filtered|gnews_sa"
parsed_topics = topics.split("|")

# define the parameters for the input and output kafka broker and topic
kafka_broker = "kafka:9092"
input_kafka_topic = parsed_topics[0]
output_kafka_topic = parsed_topics[1]

# Subscribe to the input topic
df = spark \
    .readStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", kafka_broker) \
    .option("subscribe", input_kafka_topic) \
    .load()

# parse the JSON data in the 'value' column using the defined schema then create a dataframe containing the reddit data
df = df.select(col("value").cast("string")) \
    .withColumn("value", from_json("value", schema)) \

parsed_df = df \
    .select("value.*")

# perform sentiment analysis on the parsed dataframe 
sa_reddit_df = parsed_df.withColumn('sentiment_score', analyze_sentiment_udf(parsed_df['content']))

# split the sentiment_score column into separate columns
sa_reddit_df = sa_reddit_df.withColumn("negative", sa_reddit_df["sentiment_score"][0]) \
            .withColumn("neutral", sa_reddit_df["sentiment_score"][1]) \
            .withColumn("positive", sa_reddit_df["sentiment_score"][2]) \
            .withColumn("compound", sa_reddit_df["sentiment_score"][3]) \
            .drop('sentiment_score')  # drop sentiment_score column after splitting

# stream the data to kafka
kafka_write = sa_reddit_df \
    .selectExpr("'' AS key", "to_json(struct(*)) AS value") \
    .writeStream \
    .format("kafka") \
    .option("kafka.bootstrap.servers", kafka_broker) \
    .option("topic", output_kafka_topic) \
    .start()

# Wait for the termination of the query
kafka_write.awaitTermination()
[INFO] 2024-05-05 00:03:39.849 +0800 - Final Shell file is: 
[INFO] 2024-05-05 00:03:39.873 +0800 - ****************************** Script Content *****************************************************************
[INFO] 2024-05-05 00:03:39.874 +0800 - #!/bin/bash
BASEDIR=$(cd `dirname $0`; pwd)
cd $BASEDIR
export SPARK_HOME=/opt/spark-3.5.1-bin-hadoop3
export JAVA_HOME=/opt/java/openjdk
export PYSPARK_DRIVER_PYTHON=/bin/python3.11
export PYSPARK_PYTHON=/bin/python3.11
export PYTHON_LAUNCHER=/bin/python3.11
export NLTK_DATA=/local_storage/nltk_data
${PYTHON_LAUNCHER} /tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032/py_934_3032.py
[INFO] 2024-05-05 00:03:39.875 +0800 - ****************************** Script Content *****************************************************************
[INFO] 2024-05-05 00:03:39.876 +0800 - Executing shell command : sudo -u default -i /tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032/934_3032.sh
[INFO] 2024-05-05 00:03:39.939 +0800 - process start, process id is: 4068
[INFO] 2024-05-05 00:03:40.000 +0800 -  -> 
	sudo: unable to change directory to /home/default: No such file or directory
[INFO] 2024-05-05 00:03:42.070 +0800 -  -> 
	[nltk_data] Downloading package vader_lexicon to
	[nltk_data]     /local_storage/nltk_data...
	[nltk_data]   Package vader_lexicon is already up-to-date!
[INFO] 2024-05-05 00:04:13.336 +0800 -  -> 
	:: loading settings :: url = jar:file:/opt/spark-3.5.1-bin-hadoop3/jars/ivy-2.5.1.jar!/org/apache/ivy/core/settings/ivysettings.xml
[INFO] 2024-05-05 00:04:15.353 +0800 -  -> 
	Ivy Default Cache set to: /tmp
	The jars for the packages stored in: /tmp/jars
	org.apache.spark#spark-sql-kafka-0-10_2.12 added as a dependency
	:: resolving dependencies :: org.apache.spark#spark-submit-parent-5477b2d0-2a49-4a15-bed9-16e1df1798a8;1.0
		confs: [default]
[INFO] 2024-05-05 00:04:18.444 +0800 -  -> 
		found org.apache.spark#spark-sql-kafka-0-10_2.12;3.5.1 in central
[INFO] 2024-05-05 00:04:19.459 +0800 -  -> 
		found org.apache.kafka#kafka-clients;3.4.1 in central
[INFO] 2024-05-05 00:04:20.462 +0800 -  -> 
		found org.lz4#lz4-java;1.8.0 in central
[INFO] 2024-05-05 00:04:21.469 +0800 -  -> 
		found org.xerial.snappy#snappy-java;1.1.10.3 in central
		found org.slf4j#slf4j-api;2.0.7 in central
[INFO] 2024-05-05 00:04:22.474 +0800 -  -> 
		found org.apache.hadoop#hadoop-client-runtime;3.3.4 in central
[INFO] 2024-05-05 00:04:23.502 +0800 -  -> 
		found org.apache.hadoop#hadoop-client-api;3.3.4 in central
		found commons-logging#commons-logging;1.1.3 in central
		found com.google.code.findbugs#jsr305;3.0.0 in central
		found org.apache.commons#commons-pool2;2.11.1 in central
[INFO] 2024-05-05 00:04:24.503 +0800 -  -> 
	:: resolution report :: resolve 8704ms :: artifacts dl 408ms
		:: modules in use:
		com.google.code.findbugs#jsr305;3.0.0 from central in [default]
		commons-logging#commons-logging;1.1.3 from central in [default]
		org.apache.commons#commons-pool2;2.11.1 from central in [default]
		org.apache.hadoop#hadoop-client-api;3.3.4 from central in [default]
		org.apache.hadoop#hadoop-client-runtime;3.3.4 from central in [default]
		org.apache.kafka#kafka-clients;3.4.1 from central in [default]
		org.apache.spark#spark-sql-kafka-0-10_2.12;3.5.1 from central in [default]
		org.apache.spark#spark-token-provider-kafka-0-10_2.12;3.5.1 from central in [default]
		org.lz4#lz4-java;1.8.0 from central in [default]
		org.slf4j#slf4j-api;2.0.7 from central in [default]
		org.xerial.snappy#snappy-java;1.1.10.3 from central in [default]
		---------------------------------------------------------------------
		|                  |            modules            ||   artifacts   |
		|       conf       | number| search|dwnlded|evicted|| number|dwnlded|
		---------------------------------------------------------------------
		|      default     |   11  |   0   |   0   |   0   ||   11  |   0   |
		---------------------------------------------------------------------
	:: retrieving :: org.apache.spark#spark-submit-parent-5477b2d0-2a49-4a15-bed9-16e1df1798a8
		confs: [default]
		0 artifacts copied, 11 already retrieved (0kB/95ms)
[INFO] 2024-05-05 00:04:29.566 +0800 -  -> 
	24/05/05 00:04:29 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
[INFO] 2024-05-05 00:04:33.576 +0800 -  -> 
	Setting default log level to "WARN".
	To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
[INFO] 2024-05-05 00:04:46.671 +0800 -  -> 
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4040. Attempting port 4041.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4041. Attempting port 4042.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4042. Attempting port 4043.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4043. Attempting port 4044.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4044. Attempting port 4045.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4045. Attempting port 4046.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4046. Attempting port 4047.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4047. Attempting port 4048.
	24/05/05 00:04:46 WARN Utils: Service 'SparkUI' could not bind on port 4048. Attempting port 4049.
[INFO] 2024-05-05 00:05:02.809 +0800 -  -> 
	24/05/05 00:05:02 WARN Executor: Issue communicating with driver in heartbeater
	org.apache.spark.SparkException: Exception thrown in awaitResult: 
		at org.apache.spark.util.SparkThreadUtils$.awaitResult(SparkThreadUtils.scala:56)
		at org.apache.spark.util.ThreadUtils$.awaitResult(ThreadUtils.scala:310)
		at org.apache.spark.rpc.RpcTimeout.awaitResult(RpcTimeout.scala:75)
		at org.apache.spark.rpc.RpcEndpointRef.askSync(RpcEndpointRef.scala:101)
		at org.apache.spark.rpc.RpcEndpointRef.askSync(RpcEndpointRef.scala:85)
		at org.apache.spark.storage.BlockManagerMaster.registerBlockManager(BlockManagerMaster.scala:80)
		at org.apache.spark.storage.BlockManager.reregister(BlockManager.scala:642)
		at org.apache.spark.executor.Executor.reportHeartBeat(Executor.scala:1223)
		at org.apache.spark.executor.Executor.$anonfun$heartbeater$1(Executor.scala:295)
		at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
		at org.apache.spark.util.Utils$.logUncaughtExceptions(Utils.scala:1928)
		at org.apache.spark.Heartbeater$$anon$1.run(Heartbeater.scala:46)
		at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
		at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
		at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		at java.lang.Thread.run(Thread.java:750)
	Caused by: org.apache.spark.SparkException: Exception thrown in awaitResult: 
		at org.apache.spark.util.SparkThreadUtils$.awaitResult(SparkThreadUtils.scala:56)
		at org.apache.spark.util.ThreadUtils$.awaitResult(ThreadUtils.scala:310)
		at org.apache.spark.rpc.RpcTimeout.awaitResult(RpcTimeout.scala:75)
		at org.apache.spark.rpc.RpcEnv.setupEndpointRefByURI(RpcEnv.scala:102)
		at org.apache.spark.rpc.RpcEnv.setupEndpointRef(RpcEnv.scala:110)
		at org.apache.spark.util.RpcUtils$.makeDriverRef(RpcUtils.scala:36)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.driverEndpoint$lzycompute(BlockManagerMasterEndpoint.scala:124)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$driverEndpoint(BlockManagerMasterEndpoint.scala:123)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.isExecutorAlive$lzycompute$1(BlockManagerMasterEndpoint.scala:688)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.isExecutorAlive$1(BlockManagerMasterEndpoint.scala:687)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$register(BlockManagerMasterEndpoint.scala:725)
		at org.apache.spark.storage.BlockManagerMasterEndpoint$$anonfun$receiveAndReply$1.applyOrElse(BlockManagerMasterEndpoint.scala:133)
		at org.apache.spark.rpc.netty.Inbox.$anonfun$process$1(Inbox.scala:103)
		at org.apache.spark.rpc.netty.Inbox.safelyCall(Inbox.scala:213)
		at org.apache.spark.rpc.netty.Inbox.process(Inbox.scala:100)
		at org.apache.spark.rpc.netty.MessageLoop.org$apache$spark$rpc$netty$MessageLoop$$receiveLoop(MessageLoop.scala:75)
		at org.apache.spark.rpc.netty.MessageLoop$$anon$1.run(MessageLoop.scala:41)
		... 3 more
	Caused by: org.apache.spark.rpc.RpcEndpointNotFoundException: Cannot find endpoint: spark://CoarseGrainedScheduler@addf0afec0d4:40677
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$asyncSetupEndpointRefByURI$1(NettyRpcEnv.scala:148)
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$asyncSetupEndpointRefByURI$1$adapted(NettyRpcEnv.scala:144)
		at scala.concurrent.Future.$anonfun$flatMap$1(Future.scala:307)
		at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:41)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at org.apache.spark.util.ThreadUtils$$anon$1.execute(ThreadUtils.scala:99)
		at scala.concurrent.impl.ExecutionContextImpl$$anon$4.execute(ExecutionContextImpl.scala:138)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.complete(Promise.scala:53)
		at scala.concurrent.Promise.complete$(Promise.scala:52)
		at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
		at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at org.apache.spark.util.ThreadUtils$$anon$1.execute(ThreadUtils.scala:99)
		at scala.concurrent.impl.ExecutionContextImpl$$anon$4.execute(ExecutionContextImpl.scala:138)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.complete(Promise.scala:53)
		at scala.concurrent.Promise.complete$(Promise.scala:52)
		at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
		at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at scala.concurrent.BatchingExecutor$Batch.processBatch$1(BatchingExecutor.scala:67)
		at scala.concurrent.BatchingExecutor$Batch.$anonfun$run$1(BatchingExecutor.scala:82)
		at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
		at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)
		at scala.concurrent.BatchingExecutor$Batch.run(BatchingExecutor.scala:59)
		at scala.concurrent.Future$InternalCallbackExecutor$.unbatchedExecute(Future.scala:875)
		at scala.concurrent.BatchingExecutor.execute(BatchingExecutor.scala:110)
		at scala.concurrent.BatchingExecutor.execute$(BatchingExecutor.scala:107)
		at scala.concurrent.Future$InternalCallbackExecutor$.execute(Future.scala:873)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.trySuccess(Promise.scala:94)
		at scala.concurrent.Promise.trySuccess$(Promise.scala:94)
		at scala.concurrent.impl.Promise$DefaultPromise.trySuccess(Promise.scala:187)
		at org.apache.spark.rpc.netty.NettyRpcEnv.onSuccess$1(NettyRpcEnv.scala:225)
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$askAbortable$5(NettyRpcEnv.scala:239)
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$askAbortable$5$adapted(NettyRpcEnv.scala:238)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at org.apache.spark.util.ThreadUtils$$anon$1.execute(ThreadUtils.scala:99)
		at scala.concurrent.impl.ExecutionContextImpl$$anon$4.execute(ExecutionContextImpl.scala:138)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.complete(Promise.scala:53)
		at scala.concurrent.Promise.complete$(Promise.scala:52)
		at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
		at scala.concurrent.Promise.success(Promise.scala:86)
		at scala.concurrent.Promise.success$(Promise.scala:86)
		at scala.concurrent.impl.Promise$DefaultPromise.success(Promise.scala:187)
		at org.apache.spark.rpc.netty.LocalNettyRpcCallContext.send(NettyRpcCallContext.scala:50)
		at org.apache.spark.rpc.netty.NettyRpcCallContext.reply(NettyRpcCallContext.scala:32)
		at org.apache.spark.rpc.netty.RpcEndpointVerifier$$anonfun$receiveAndReply$1.applyOrElse(RpcEndpointVerifier.scala:31)
		... 8 more
	24/05/05 00:05:02 ERROR Inbox: Ignoring error
	org.apache.spark.SparkException: Exception thrown in awaitResult: 
		at org.apache.spark.util.SparkThreadUtils$.awaitResult(SparkThreadUtils.scala:56)
		at org.apache.spark.util.ThreadUtils$.awaitResult(ThreadUtils.scala:310)
		at org.apache.spark.rpc.RpcTimeout.awaitResult(RpcTimeout.scala:75)
		at org.apache.spark.rpc.RpcEnv.setupEndpointRefByURI(RpcEnv.scala:102)
		at org.apache.spark.rpc.RpcEnv.setupEndpointRef(RpcEnv.scala:110)
		at org.apache.spark.util.RpcUtils$.makeDriverRef(RpcUtils.scala:36)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.driverEndpoint$lzycompute(BlockManagerMasterEndpoint.scala:124)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$driverEndpoint(BlockManagerMasterEndpoint.scala:123)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.isExecutorAlive$lzycompute$1(BlockManagerMasterEndpoint.scala:688)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.isExecutorAlive$1(BlockManagerMasterEndpoint.scala:687)
		at org.apache.spark.storage.BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$register(BlockManagerMasterEndpoint.scala:725)
		at org.apache.spark.storage.BlockManagerMasterEndpoint$$anonfun$receiveAndReply$1.applyOrElse(BlockManagerMasterEndpoint.scala:133)
		at org.apache.spark.rpc.netty.Inbox.$anonfun$process$1(Inbox.scala:103)
		at org.apache.spark.rpc.netty.Inbox.safelyCall(Inbox.scala:213)
		at org.apache.spark.rpc.netty.Inbox.process(Inbox.scala:100)
		at org.apache.spark.rpc.netty.MessageLoop.org$apache$spark$rpc$netty$MessageLoop$$receiveLoop(MessageLoop.scala:75)
		at org.apache.spark.rpc.netty.MessageLoop$$anon$1.run(MessageLoop.scala:41)
		at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
		at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
		at java.lang.Thread.run(Thread.java:750)
	Caused by: org.apache.spark.rpc.RpcEndpointNotFoundException: Cannot find endpoint: spark://CoarseGrainedScheduler@addf0afec0d4:40677
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$asyncSetupEndpointRefByURI$1(NettyRpcEnv.scala:148)
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$asyncSetupEndpointRefByURI$1$adapted(NettyRpcEnv.scala:144)
		at scala.concurrent.Future.$anonfun$flatMap$1(Future.scala:307)
		at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:41)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at org.apache.spark.util.ThreadUtils$$anon$1.execute(ThreadUtils.scala:99)
		at scala.concurrent.impl.ExecutionContextImpl$$anon$4.execute(ExecutionContextImpl.scala:138)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.complete(Promise.scala:53)
		at scala.concurrent.Promise.complete$(Promise.scala:52)
		at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
		at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at org.apache.spark.util.ThreadUtils$$anon$1.execute(ThreadUtils.scala:99)
		at scala.concurrent.impl.ExecutionContextImpl$$anon$4.execute(ExecutionContextImpl.scala:138)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.complete(Promise.scala:53)
		at scala.concurrent.Promise.complete$(Promise.scala:52)
		at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
		at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at scala.concurrent.BatchingExecutor$Batch.processBatch$1(BatchingExecutor.scala:67)
		at scala.concurrent.BatchingExecutor$Batch.$anonfun$run$1(BatchingExecutor.scala:82)
		at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
		at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)
		at scala.concurrent.BatchingExecutor$Batch.run(BatchingExecutor.scala:59)
		at scala.concurrent.Future$InternalCallbackExecutor$.unbatchedExecute(Future.scala:875)
		at scala.concurrent.BatchingExecutor.execute(BatchingExecutor.scala:110)
		at scala.concurrent.BatchingExecutor.execute$(BatchingExecutor.scala:107)
		at scala.concurrent.Future$InternalCallbackExecutor$.execute(Future.scala:873)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.trySuccess(Promise.scala:94)
		at scala.concurrent.Promise.trySuccess$(Promise.scala:94)
		at scala.concurrent.impl.Promise$DefaultPromise.trySuccess(Promise.scala:187)
		at org.apache.spark.rpc.netty.NettyRpcEnv.onSuccess$1(NettyRpcEnv.scala:225)
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$askAbortable$5(NettyRpcEnv.scala:239)
		at org.apache.spark.rpc.netty.NettyRpcEnv.$anonfun$askAbortable$5$adapted(NettyRpcEnv.scala:238)
		at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
		at org.apache.spark.util.ThreadUtils$$anon$1.execute(ThreadUtils.scala:99)
		at scala.concurrent.impl.ExecutionContextImpl$$anon$4.execute(ExecutionContextImpl.scala:138)
		at scala.concurrent.impl.CallbackRunnable.executeWithValue(Promise.scala:72)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.$anonfun$tryComplete$1$adapted(Promise.scala:288)
		at scala.concurrent.impl.Promise$DefaultPromise.tryComplete(Promise.scala:288)
		at scala.concurrent.Promise.complete(Promise.scala:53)
		at scala.concurrent.Promise.complete$(Promise.scala:52)
		at scala.concurrent.impl.Promise$DefaultPromise.complete(Promise.scala:187)
		at scala.concurrent.Promise.success(Promise.scala:86)
		at scala.concurrent.Promise.success$(Promise.scala:86)
		at scala.concurrent.impl.Promise$DefaultPromise.success(Promise.scala:187)
		at org.apache.spark.rpc.netty.LocalNettyRpcCallContext.send(NettyRpcCallContext.scala:50)
		at org.apache.spark.rpc.netty.NettyRpcCallContext.reply(NettyRpcCallContext.scala:32)
		at org.apache.spark.rpc.netty.RpcEndpointVerifier$$anonfun$receiveAndReply$1.applyOrElse(RpcEndpointVerifier.scala:31)
		... 8 more
[INFO] 2024-05-05 00:05:08.854 +0800 -  -> 
	Traceback (most recent call last):
	  File "/tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032/py_934_3032.py", line 51, in <module>
	    parsed_topics = topics.split("|")
	                    ^^^^^^^^^^^^
	AttributeError: 'tuple' object has no attribute 'split'
[INFO] 2024-05-05 00:05:09.972 +0800 - process has exited. execute path:/tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032, processId:4068 ,exitStatusCode:1 ,processWaitForStatus:true ,processExitValue:1
[INFO] 2024-05-05 00:05:09.999 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:05:10.000 +0800 - *********************************  Finalize task instance  ************************************
[INFO] 2024-05-05 00:05:10.000 +0800 - ***********************************************************************************************
[INFO] 2024-05-05 00:05:10.002 +0800 - Upload output files: [] successfully
[INFO] 2024-05-05 00:05:10.015 +0800 - Send task execute status: FAILURE to master : 172.18.1.1:1234
[INFO] 2024-05-05 00:05:10.017 +0800 - Remove the current task execute context from worker cache
[INFO] 2024-05-05 00:05:10.017 +0800 - The current execute mode isn't develop mode, will clear the task execute file: /tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032
[INFO] 2024-05-05 00:05:10.018 +0800 - Success clear the task execute file: /tmp/dolphinscheduler/exec/process/default/13010050770016/13386218435520_20/934/3032
[INFO] 2024-05-05 00:05:10.018 +0800 - FINALIZE_SESSION
