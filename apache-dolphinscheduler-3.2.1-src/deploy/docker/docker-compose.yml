# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "3.8"

services:
  dolphinscheduler-postgresql:
    image: bitnami/postgresql:15.2.0
    ports:
      - "5432:5432"
    profiles: ["all", "schema"]
    environment:
      POSTGRESQL_USERNAME: root
      POSTGRESQL_PASSWORD: root
      POSTGRESQL_DATABASE: dolphinscheduler
    volumes:
      - ./volumes/dolphinscheduler-postgresql:/bitnami/postgresql
      - ./volumes/dolphinscheduler-postgresql-init-persistence/init-persistence-db.sh:/docker-entrypoint-initdb.d/init-persistence-db.sh
    healthcheck:
      test: ["CMD", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/5432"]
      interval: 5s
      timeout: 60s
      retries: 120
    networks:
      - dolphinscheduler

  dolphinscheduler-zookeeper:
    image: bitnami/zookeeper:3.7.1
    profiles: ["all"]
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_4LW_COMMANDS_WHITELIST: srvr,ruok,wchs,cons
    volumes:
      - ./volumes/dolphinscheduler-zookeeper:/bitnami/zookeeper
    healthcheck:
      test: ["CMD", "bash", "-c", "cat < /dev/null > /dev/tcp/127.0.0.1/2181"]
      interval: 5s
      timeout: 60s
      retries: 120
    networks:
      - dolphinscheduler

  dolphinscheduler-schema-initializer:
    image: ${HUB}/dolphinscheduler-tools:${TAG}
    env_file: .env
    profiles: ["schema"]
    command: [ tools/bin/upgrade-schema.sh ]
    depends_on:
      dolphinscheduler-postgresql:
        condition: service_healthy
    volumes:
      - ./volumes/dolphinscheduler-logs:/opt/dolphinscheduler/logs
      - ./volumes/dolphinscheduler-shared-local:/opt/soft
      - ./volumes/dolphinscheduler-resource-local:/dolphinscheduler
    networks:
      - dolphinscheduler

  dolphinscheduler-api:
    image: ${HUB}/dolphinscheduler-api:${TAG}
    ports:
      - "12345:12345"
      - "25333:25333"
    profiles: ["all"]
    env_file: .env
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:12345/dolphinscheduler/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      dolphinscheduler-zookeeper:
        condition: service_healthy
    volumes:
      - ./volumes/dolphinscheduler-logs:/opt/dolphinscheduler/logs
      - ./volumes/dolphinscheduler-shared-local:/opt/soft
      - ./volumes/dolphinscheduler-resource-local:/dolphinscheduler
    networks:
      - dolphinscheduler

  dolphinscheduler-alert:
    image: ${HUB}/dolphinscheduler-alert-server:${TAG}
    profiles: ["all"]
    env_file: .env
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:50053/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      dolphinscheduler-zookeeper:
        condition: service_healthy
    volumes:
      - ./volumes/dolphinscheduler-logs:/opt/dolphinscheduler/logs
    networks:
      - dolphinscheduler

  dolphinscheduler-master:
    image: ${HUB}/dolphinscheduler-master:${TAG}
    profiles: ["all"]
    env_file: .env
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:5679/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      dolphinscheduler-zookeeper:
        condition: service_healthy
    volumes:
      - ./volumes/dolphinscheduler-logs:/opt/dolphinscheduler/logs
      - ./volumes/dolphinscheduler-shared-local:/opt/soft
    networks:
      - dolphinscheduler

  dolphinscheduler-worker:
    image: ${HUB}/dolphinscheduler-worker:local_${TAG}
    build:
      # Build the image from the Dockerfile if the image doesn't exist
      context: dolphinscheduler_worker_image/
      dockerfile: Dockerfile
    profiles: ["all"]
    env_file: .env
    healthcheck:
      test: [ "CMD", "curl", "http://localhost:1235/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    depends_on:
      dolphinscheduler-zookeeper:
        condition: service_healthy
    volumes:
      - ./volumes/dolphinscheduler-worker-data:/tmp/dolphinscheduler
      - ./volumes/dolphinscheduler-logs:/opt/dolphinscheduler/logs
      - ./volumes/dolphinscheduler-shared-local:/opt/soft
      - ./volumes/dolphinscheduler-resource-local:/dolphinscheduler
      - ./volumes/local_storage:/local_storage
    networks:
      dolphinscheduler:
        ipv4_address: 172.18.1.1

  # spark-master:
  #   image: bitnami/spark:3.4.2
  #   command: bin/spark-class org.apache.spark.deploy.master.Master
  #   environment:
  #     SPARK_WORKLOAD: master
  #   ports:
  #     - "9090:8080"
  #     - "7077:7077"
  #   profiles: ["all"]
  #   networks:
  #     - dolphinscheduler

  # spark-worker:
  #   image: bitnami/spark:3.4.2
  #   command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #   depends_on:
  #     - spark-master
  #   environment:
  #     SPARK_MODE: worker
  #     SPARK_WORKER_CORES: 2
  #     SPARK_WORKER_MEMORY: 4g
  #     SPARK_MASTER_URL: spark://spark-master:7077
  #   profiles: ["all"]
  #   networks:
  #     - dolphinscheduler

  spark-master:
    image: bitnami/spark:3.5.1
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - "9090:8080"
      - "7077:7077"
    profiles: ["all"]
    networks:
      - dolphinscheduler

  spark-worker:
    image: bitnami/spark:3.5.1
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    profiles: ["all"]
    networks:
      - dolphinscheduler

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.4.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    profiles: ["all"]
    networks:
      - dolphinscheduler

  kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - kafka-zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: kafka-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    profiles: ["all"]
    networks:
      - dolphinscheduler

  init-kafka:
    image: confluentinc/cp-kafka:7.4.4
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic reddit_post_preprocessed --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic reddit_post_filtered --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic reddit_post_sa --replication-factor 1 --partitions 1
      
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic gnews_preprocessed --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic gnews_filtered --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic gnews_sa --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
    profiles: ["all"]
    networks:
      - dolphinscheduler

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'true'
    volumes:
      - ./volumes/kui/:/etc/kafkaui/
    profiles: ["all"]
    networks:
      - dolphinscheduler

  mycluster:
    image: apache/hadoop:3
    hostname: mycluster
    command: ["hdfs", "namenode"]
    ports:
      - 9870:9870
    env_file:
      - ./config
    environment:
        ENSURE_NAMENODE_DIR: "/tmp/hadoop-root/dfs/name"
    volumes:
      - ./volumes/namenode_data:/hadoop/dfs/name
    profiles: ["all"]
    networks:
      - dolphinscheduler

  datanode:
    image: apache/hadoop:3
    command: ["hdfs", "datanode"]
    env_file:
      - ./config
    volumes:
      - ./volumes/datanode_data:/hadoop/dfs/data
    profiles: ["all"]
    networks:
      - dolphinscheduler

  resourcemanager:
    image: apache/hadoop:3
    hostname: resourcemanager
    command: ["yarn", "resourcemanager"]
    ports:
        - 8088:8088
    env_file:
      - ./config
    volumes:
      - ./test.sh:/opt/test.sh
    profiles: ["all"]
    networks:
      - dolphinscheduler

  nodemanager:
    image: apache/hadoop:3
    command: ["yarn", "nodemanager"]
    env_file:
      - ./config
    profiles: ["all"]
    networks:
      - dolphinscheduler

networks:
  dolphinscheduler:
    driver: bridge
    ipam:
      config:
        - 
          subnet: 172.18.0.0/16
          gateway: 172.18.0.1 # the ip is important as the task original ip in which it was stored will persist in the postgresql database

volumes:
  dolphinscheduler-postgresql:
    driver: local
  dolphinscheduler-zookeeper:
    driver: local
  dolphinscheduler-worker-data:
    driver: local
  dolphinscheduler-logs:
    driver: local
  dolphinscheduler-shared-local:
    driver: local
  dolphinscheduler-resource-local:
    driver: local

